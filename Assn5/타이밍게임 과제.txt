int g_Timing[] = { 5, 10, 14, 17, 20, 25, 29, 31, 33 };

// 초에 해당하는 값을 배열에 넣어두고, 이 시간을 타이밍 데이터로 씀.
// 뒤로 갈 수록 큰 값을 넣는걸 원칙으로 함.

// # 화면 지우기 system("cls")
// system 함수는 외부 커멘드 명령어를 실행시키는 함수.
// cls 는 콘솔 화면을 지우는 명령어임.
// system("cls");  // 이라고 코드를 적으면 콘솔 화면이 지워짐.
//

//
// # 시간구하기 - clock() 함수.
// 프로세스가 시작된 후의 시간, 1초는 CLOCKS_PER_SEC 값. (1000ms)
// 리턴값은 clock_t (long) 타입.

// # 키보드 눌릭 확인 - _kbhit() 함수.
// 키보드가 눌렸는지 확인후 눌렸으면 true 리턴.
// 단, 키를 누른 후 콘솔키에서 값을 빼주지 않으면 다음 루프에서도 계속 true 리턴.
// 
// _getch() 함수를 사용하여 콘솔키 입력을 뽑을 수 있음.
// 본래 사용법 char KeyChar = _getch(); 
// 우리는 _getch() 의 리턴값 (눌린키) 는 사용하지 않지만 콘솔키를 빼기 위해 씀
//
// if ( _kbhit() )
// {
//		_getch();
//		컨텐츠 로직...
// }


// # abs(X) 절대값 함수.
// 음수의 값을 양수로 바꿈, 양수는 그냥 양수


// - 컨텐츠 부
//
// 1. 화면 상단에 시간이 표시됨.  초:밀리세컨드   (00:000  으로 자리수 맞춤)
// 2. 아래에는 각 키 타이밍의 정보와 해당 타이밍에 성공여부 결과를 표시
// 3. 아무런 키를 누르지 않고 지정 시간을 1초 이상 넘으면 자동으로 fail 처리.
// 4. 사용자가 키를 누르면 해당 시간을 체크하여 오차 범위에 따라서 지정 타이밍의 결과가 화면에 표시됨.
//
// CLOCKS_PER_SEC / 4 한 수치를 1단계로 최대 4단계 까지의 오차로 Great, Good, Nogood, Bad 단계 측정.

// 오차라는 것은, + - 모두 해당됨. 


while ( 1 )
{
	// 입력부

	// 로직부

	// 랜더부 
}







